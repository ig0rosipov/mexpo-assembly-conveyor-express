{"version":3,"sources":["context/socket.js","utils/api.js","components/Timer.js","components/App.js","reportWebVitals.js","index.js"],"names":["socket","socketio","connect","SocketContext","React","createContext","api","this","_baseUrl","result","ok","Promise","reject","status","fetch","method","headers","then","_handleOriginalResponse","data","json","Timer","props","useState","phase","setPhase","time","setTime","hours","setHours","minutes","setMinutes","seconds","setSeconds","timestamp","setTimestamp","useContext","useEffect","on","setTimer","intervalId","setInterval","clearInterval","checkState","runConveyor","stopConveyor","console","log","parseInt","catch","err","className","onSubmit","e","preventDefault","type","step","defaultValue","onChange","target","value","split","App","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39a736fa.chunk.js","sourcesContent":["import socketio from \"socket.io-client\";\r\nimport React from \"react\";\r\n\r\nconst SOCKET_URL = \"http://localhost:5000\";\r\n\r\nexport const socket = socketio.connect(SOCKET_URL);\r\nexport const SocketContext = React.createContext();","class Api {\r\n  constructor() {\r\n    this._baseUrl = \"http://192.168.25.181\";\r\n  }\r\n\r\n  _handleOriginalResponse(result) {\r\n    if (!result.ok) {\r\n      return Promise.reject(`Ошибка: ${result.status}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  runConveyor() {\r\n    return fetch(this._baseUrl + \"/run\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then(this._handleOriginalResponse)\r\n      .then((data) => data.json());\r\n  }\r\n\r\n  stopConveyor() {\r\n    return fetch(this._baseUrl + \"/stop\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then(this._handleOriginalResponse)\r\n      .then((data) => data.json());\r\n  }\r\n\r\n  checkState() {\r\n    return fetch(this._baseUrl + \"/check\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then(this._handleOriginalResponse)\r\n      .then((data) => data.json());\r\n  }\r\n}\r\n\r\nconst api = new Api();\r\n\r\nexport default api;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { SocketContext } from \"../context/socket\";\r\nimport api from \"../utils/api\";\r\n\r\nconst Timer = (props) => {\r\n  const [phase, setPhase] = useState(\"production\");\r\n  const [time, setTime] = useState([0, 3, 0]);\r\n  const [hours, setHours] = useState(0);\r\n  const [minutes, setMinutes] = useState(3);\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [timestamp, setTimestamp] = useState(\"no timestamp yet\");\r\n\r\n  const socket = useContext(SocketContext);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"timestamp\", (timestamp => {\r\n      setTimestamp(timestamp);\r\n    }))\r\n  })\r\n\r\n  const setTimer = (hours, minutes, seconds) => {\r\n    setHours(hours);\r\n    setMinutes(minutes);\r\n    setSeconds(seconds);\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    api\r\n      .stopConveyor()\r\n      .then((data) => {\r\n        console.log(data);\r\n      })\r\n      .catch((err) => console.log(err));\r\n    setPhase(\"starting\");\r\n    setTimer(0, 0, 5);\r\n    console.log(e);\r\n  };\r\n\r\n  const timeChange = (e) => {\r\n    setTime(e.target.value.split(\":\"));\r\n  };\r\n\r\n  useEffect(() => {\r\n    \r\n    setPhase(\"starting\");\r\n    setTimer(0, 0, 5);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let intervalId;\r\n    intervalId = setInterval(() => {\r\n      if (hours <= 0 && minutes <= 0 && seconds <= 0) {\r\n        clearInterval(intervalId);\r\n        switch (phase) {\r\n          case \"starting\":\r\n            api\r\n              .checkState()\r\n              .then((data) => {\r\n                setPhase(data.status);\r\n                if (data.status === \"running\") {\r\n                  return api.runConveyor();\r\n                }\r\n                if (data.status === \"production\") {\r\n                  return api.stopConveyor();\r\n                }\r\n              })\r\n              .then((data) => {\r\n                if (data.status === \"running\") {\r\n                  setTimer(0, 0, 5);\r\n                }\r\n                if (data.status === \"production\") {\r\n                  console.log(time);\r\n                  setTimer(\r\n                    parseInt(time[0]),\r\n                    parseInt(time[1]),\r\n                    parseInt(time[2])\r\n                  );\r\n                }\r\n              })\r\n              .catch((err) => console.log(err));\r\n            break;\r\n          case \"production\":\r\n            api\r\n              .runConveyor()\r\n              .then((data) => {\r\n                console.log(data);\r\n                setSeconds(5);\r\n                setPhase(\"running\");\r\n              })\r\n              .catch((err) => console.log(err));\r\n            break;\r\n          case \"running\":\r\n            api\r\n              .stopConveyor()\r\n              .then((data) => {\r\n                console.log(data);\r\n                setHours(parseInt(time[0]));\r\n                setMinutes(parseInt(time[1]));\r\n                setSeconds(parseInt(time[2]));\r\n                setPhase(\"production\");\r\n              })\r\n              .catch((err) => console.log(err));\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n      if (hours > 0 && minutes <= 0 && seconds <= 0) {\r\n        setHours((hours) => hours - 1);\r\n        setMinutes((minutes) => (minutes = 59));\r\n      }\r\n      if (minutes > 0 && seconds <= 0) {\r\n        setMinutes((minutes) => minutes - 1);\r\n        setSeconds((seconds) => (seconds = 59));\r\n      }\r\n      if (seconds > 0) {\r\n        setSeconds((seconds) => seconds - 1);\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, [phase, time, hours, minutes, seconds]);\r\n\r\n  return (\r\n    <>\r\n      <form className=\"form\" onSubmit={onSubmit}>\r\n        <input\r\n          type=\"time\"\r\n          step=\"1\"\r\n          defaultValue=\"00:03:00\"\r\n          onChange={timeChange}\r\n        ></input>\r\n        <button>Send</button>\r\n      </form>\r\n\r\n      <p className=\"timer\">{`${hours}h:${minutes}m:${seconds}s`}</p>\r\n      <p className=\"timer\">{`PHASE: ${phase}`}</p>\r\n      <p className=\"timestamp\">{`timestamp: ${timestamp}`}</p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import Timer from \"./Timer\";\r\nimport { SocketContext, socket } from \"../context/socket\";\r\nimport React from \"react\";\r\n\r\nconst endpoint = \"http://localhost:5000\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <SocketContext.Provider value={socket}>\r\n      <Timer />\r\n    </SocketContext.Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}